#!/usr/bin/env python3

import json
import locale
import sys
import reports
import os
import emails


def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data


def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(
        car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
    """Analyzes the data, looking for maximums.

    Returns a list of lines that summarize the information.
    """
    # locale.setlocale(locale.LC_ALL, 'en_US.UTF8')
    max_revenue = {"revenue": 0}

    most_sales = {"sales": 0, "car":{"car_make": "", "car_model": "", "car_year": 0}}
    most_popular = {0000:{"count": 0, "tot_sales":0}}

    for item in data:
        # Calculate the revenue generated by this model (price * total_sales)
        # We need to convert the price from "$1234.56" to 1234.56
        item_price = float(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price

        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # TODO: also handle max sales
        if item["total_sales"] > most_sales["sales"]:
            most_sales["sales"] = item["total_sales"]
            most_sales["car"]["car_make"] = item["car"]["car_make"]
            most_sales["car"]["car_model"] = item["car"]["car_model"]
            most_sales["car"]["car_year"] = item["car"]["car_year"]

        # TODO: also handle most popular car_year
        if item["car"]["car_year"] not in most_popular:
            most_popular[ item["car"]["car_year"] ] = {"count":0, "tot_sales":0}
            most_popular[ item["car"]["car_year"] ]["count"] += item["total_sales"]
            most_popular[ item["car"]["car_year"] ]["tot_sales"] += item_revenue
            # print(most_popular)
        else:
            most_popular[item["car"]["car_year"]]["count"] += item["total_sales"]
            most_popular[ item["car"]["car_year"] ]["tot_sales"] += item_revenue
            # print(most_popular)

    popular_year = 0
    high_count = 0
    for key in most_popular:
        if most_popular[key]["count"] > high_count:
            high_count = most_popular[key]["count"]
            popular_year = key

    print('')
    print(f'Count: {key}')
    print(f'Popular year: {high_count}')
    print(f'Popular year: {popular_year}')
    print('')

    summary = [
        "The {} generated the most revenue: ${}".format(
        format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(
        format_car(most_sales["car"]), most_sales["sales"]),
        "The most popular year was {} with {} sales.".format(
        popular_year, high_count)
    ]

    return summary


def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data


def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)

    # TODO: turn this into a PDF report
    s1 = summary[0]
    s2 = summary[1]
    s3 = summary[2]
    paragraph = s1 + ".<br/>" + s2 + ".<br/>" + s3
    email_paragraph = s1 + ".\n" + s2 + ".\n" + s3

    table_data = cars_dict_to_table(data)
    reports.generate("/tmp/cars.pdf", "Sales summary for last month", paragraph, table_data)

    # TODO: send the PDF report as an email attachment
    sender = "automation@example.com"
    receiver = "student-02-c646c803c4e7@example.com"
    subject = 'Sales summary for last month'
    body = email_paragraph

    message = emails.generate(sender, receiver, subject, body, "cars.pdf")
    emails.send(message)


if __name__ == "__main__":
    main(sys.argv)